% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/round_time.R
\name{round_time}
\alias{round_time}
\alias{round_time.default}
\alias{round_time.difftime}
\alias{round_time.hms}
\title{Round time values}
\usage{
round_time(x)

\method{round_time}{default}(x)

\method{round_time}{difftime}(x)

\method{round_time}{hms}(x)
}
\arguments{
\item{x}{An object belonging to one of the following classes: \code{Duration},
\code{Period}, \code{difftime}, \code{hms}, \code{POSIXct}, or \code{POSIXlt}.}
}
\value{
An object of the same class of \code{x} with its \code{numeric} value rounded
at the ones place.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

\code{round_time()} takes a \code{Duration}, \code{Period}, \code{difftime}, \code{hms}, \code{POSIXct}, or
\code{POSIXlt} object and round its \code{numeric} value at the ones place.
}
\details{
\subsection{Deprecation notice}{

\code{vctrs} support was added to the \link[lubridate:lubridate-package]{lubridate}
package with its 1.7.9 version (see the pull
\href{https://github.com/tidyverse/lubridate/pull/871}{here}). This resolves
issues when rounding \code{Duration}, \code{Period}, \code{Interval}, and \code{POSIXt} objects
to the ones place with the \link[base:Round]{round} function.

It looks like the \link[hms:hms-package]{hms} will also add \code{vctrs} support
following its 1.0.0 version (learn more
\href{https://github.com/tidyverse/hms/issues/18}{here}). When this occurs,
\code{round_time()} functionality will no longer be needed and the function will
be removed from the \code{mctq} package.
}

\subsection{Round standard}{

\code{round_time()} uses \code{\link[base:Round]{base::round()}} for rounding. That is to say that
\code{round_time()} uses the same IEC 60559 standard (\emph{"go to the even digit"})
for rounding off a 5. Therefore, \code{round(0.5)} is equal to 0 and \code{round(-1.5)}
is equal to -2. See \code{?round} to learn more.
}
}
\examples{
## Scalar example

lubridate::dmilliseconds(123456789)
#> [1] "123456.789s (~1.43 days)" # Expected
round_time(lubridate::dmilliseconds(123456789))
#> [1] "123457s (~1.43 days)" # Expected

lubridate::microseconds(123456789)
#> [1] "123.456789S" # Expected
round_time(lubridate::microseconds(123456789))
#> [1] "123S" # Expected

as.difftime(12345.6789, units = "secs")
#> Time difference of 12345.68 secs # Expected
round_time(as.difftime(12345.6789, units = "secs"))
#> Time difference of 12346 secs # Expected

hms::as_hms(12345.6789)
#> 03:25:45.6789 # Expected
round_time(hms::as_hms(12345.6789))
#> 03:25:46 # Expected

lubridate::as_datetime(12345.6789, tz = "EST")
#> [1] "1969-12-31 22:25:45 EST" # Expected
as.numeric(lubridate::as_datetime(12345.6789, tz = "EST"))
#> [1] 12345.68 # Expected
round_time(lubridate::as_datetime(12345.6789, tz = "EST"))
#> [1] "1969-12-31 22:25:46 EST" # Expected
as.numeric(round_time(lubridate::as_datetime(12345.6789, tz = "EST")))
#> [1] 12346 # Expected

## Vector example

x <- c(lubridate::dhours(5.6987), lubridate::dhours(2.6875154))
x
#> [1] "20515.32s (~5.7 hours)"    "9675.05544s (~2.69 hours)" # Expected
round_time(x)
#> [1] "20515s (~5.7 hours)" "9675s (~2.69 hours)" # Expected
}
\seealso{
Other date-time rounding functions: \code{\link[hms:round_hms]{hms::round_hms()}}
\code{\link[hms:round_hms]{hms::trunc_hms()}} \code{\link[lubridate:round_date]{lubridate::round_date()}}.

Other utility functions: 
\code{\link{assign_date}()},
\code{\link{pretty_mctq}()},
\code{\link{qplot_walk}()},
\code{\link{random_mctq}()},
\code{\link{raw_data}()},
\code{\link{shorter_interval}()},
\code{\link{sum_time}()}
}
\concept{utility functions}
