% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sum_time.R
\name{sum_time}
\alias{sum_time}
\title{Sum time values}
\usage{
sum_time(..., class = "hms", clock = TRUE)
}
\arguments{
\item{...}{Vectors belonging to one or more of the following classes:
\code{Duration}, \code{Period}, \code{difftime}, \code{hms}, \code{POSIXct}, \code{POSIXlt}, or
\code{Interval}.}

\item{class}{(optional) A string indicating the output class (default:
\code{"hms"}).}

\item{clock}{(optional) A logical value indicating whether the sum should
roll over on a 24 hour clock basis (default: \code{TRUE}).}
}
\value{
If \code{clock = TRUE} (default), an object of the indicated class in
\code{class} (default: \code{"hms"}) with the sum of the time from objects in \code{...}
rolled over on a 24 hour clock basis. Else, the same as previous, but
\strong{not} rolled over on a 24 hours clock basis (accumulative).
}
\description{
\code{sum_time()} returns the sum of the time from different kinds of date/time
objects. The sum can also be set to roll on a 24 hours clock basis, helping
with time arithmetic issues.
}
\details{
\subsection{\code{class} argument}{

\code{sum_time()} is integrated with \code{\link[=convert_to]{convert_to()}}. That way you can choose
what class of object will prefer for output.
}

\subsection{\code{POSIXt} objects}{

\code{POSIXt} values in \code{...} will be strip of their dates. Only the hours will be
considered.
}

\subsection{\code{Period} objects}{

\code{Period} objects are a special time of object develop by the
\link[lubridate:lubridate-package]{lubridate::lubridate} team that track changes in clock times ignoring
time irregularities. That is to say that 1 day as \code{Period} will always
represent 1 day in the time line.

\code{sum_time} ignores that property of \code{Period} objects, treating them as
objects of class \code{Duration}.
}

\subsection{Time line irregularities}{

This function does not take into account time line irregularities (\emph{e.g.}
leap years, DST, leap seconds). This may not be a issue for most people, but
it must be considered when doing time arithmetic.
}
}
\examples{
sum_time(hms::parse_hm("11:45"), lubridate::dhours(5))
#> 16:45:00 # Expected
sum_time(lubridate::hours(25), lubridate::dhours(5), lubridate::minutes(50))
#> 06:50:00 # Expected
sum_time(lubridate::days(), lubridate::dhours(8), clock = FALSE)
#> 32:00:00 # Expected
x <- c(as.POSIXct("2020-01-01 15:00:00"), as.POSIXct("1999-05-04 17:30:00"))
y <- lubridate::as.interval(lubridate::dhours(7), as.Date("1970-05-08"))
sum_time(x, y, clock = FALSE, class = "duration")
#> [1] "142200s (~1.65 days)" # Expected
}
\seealso{
Other time arithmetic functions: 
\code{\link{assign_date}()},
\code{\link{shortest_interval}()}
}
\concept{time arithmetic functions}
